/*
Copyright 2019 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/gravitational/wormhole/pkg/apis/wormhole.gravitational.io/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WGNodeLister helps list WGNodes.
type WGNodeLister interface {
	// List lists all WGNodes in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.WGNode, err error)
	// Get retrieves the WGNode from the index for a given name.
	Get(name string) (*v1beta1.WGNode, error)
	WGNodeListerExpansion
}

// wGNodeLister implements the WGNodeLister interface.
type wGNodeLister struct {
	indexer cache.Indexer
}

// NewWGNodeLister returns a new WGNodeLister.
func NewWGNodeLister(indexer cache.Indexer) WGNodeLister {
	return &wGNodeLister{indexer: indexer}
}

// List lists all WGNodes in the indexer.
func (s *wGNodeLister) List(selector labels.Selector) (ret []*v1beta1.WGNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.WGNode))
	})
	return ret, err
}

// Get retrieves the WGNode from the index for a given name.
func (s *wGNodeLister) Get(name string) (*v1beta1.WGNode, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("wgnode"), name)
	}
	return obj.(*v1beta1.WGNode), nil
}
